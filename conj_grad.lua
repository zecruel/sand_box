function conjugate_gradient (A, x, b)
-- credito: https://en.wikipedia.org/wiki/Conjugate_gradient_method

	--inicializa
	n = #A
	local r = {}
	local tmp = 0
	local erro = 0
	
	-- obtem r0
	for l = 1, n do
		tmp = 0
		for c = 1, n do
			tmp = tmp + A[l][c] * x[c]
		end
		r[l] = b[l] - tmp
		erro = erro + r[l] * r[l]
	end
	if erro < 1e-6 then return erro, 0 end -- verifica criterio de parada
	
	-- obtem p0
	local p = {}
	for l = 1, n do  p[l] = r[l] end
	
	-- comeca as iteracoes
	local alfa, beta
	local num, den
	for k = 1, 1000 do -- max de 1000 iteracoes
	
		-- calcula alfa -> escalar
		num = 0; den = 0
		for l = 1, n do
			tmp = 0
			for c = 1, n do
				tmp = tmp + A[l][c] * p[c]
			end
			den = den + p[l] * tmp
			num = num + r[l] * r[l]
		end
		alfa = num / den
		
		-- proximo vetor de resultado
		for l = 1, n do
			x[l] = x[l] + alfa * p[l]
		end
		
		-- calcula o vetor de restos r e os componentes de beta
		den = 0; erro = 0
		for l = 1, n do
			tmp = 0
			for c = 1, n do
				tmp = tmp + A[l][c] * p[c]
			end
			den = den +  r[l] * r[l]
			r[l] = r[l] - alfa * tmp
			erro = erro + r[l] * r[l]
		end
		
		if erro < 1e-6 then return erro, k end -- verifica criterio de parada
		
		-- calcula beta e aplica ao proximo vetor p
		beta = erro / den
		for l = 1, n do
			p[l] = r[l] + beta * p[l]
		end
	end
	
	return erro, k
end



entrada = {
	{
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,100,100,100,100,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,100,100,100,100,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,100,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,100,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,100,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,100,100,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
	},
	{
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},

	},
	{
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},

	},
	{
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},
		{0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001,0.001},

	},
}
pags =  #entrada
lins = #entrada[1]
cols = #entrada[1][1]

g_t_remoto = 1 / (lins * cols)
--g_t_remoto =  0.1

print ('dimensoes = ', pags, lins, cols)
matriz = {}
x = {}
b = {}
for i = 1, lins * cols * pags do
	matriz[i] = {}
	x[i] = 2
	b[i] = 0
	for j = 1, lins * cols * pags do
		matriz[i][j] = 0
	end
end
pos_l = 1
for k = 1, pags do
	for i = 1, lins do
		for j = 1, cols do
			
			if (j < cols) then
				-- escolhe o menor valor de condutancia
				g = (entrada[k][i][j] < entrada[k][i][j + 1]) and entrada[k][i][j] or entrada[k][i][j + 1]
				pos_c = (k - 1) * cols * lins + (i - 1) * cols + j + 1
				matriz[pos_l][pos_c] = -g
				matriz[pos_c][pos_l] = -g
				-- adiciona na diagonal
				matriz[pos_c][pos_c] = matriz[pos_c][pos_c] + g
				matriz[pos_l][pos_l] = matriz[pos_l][pos_l] + g
			else
				-- escolhe o menor valor de condutancia
				g = (entrada[k][i][j] < entrada[k][i][j -1]) and entrada[k][i][j] or entrada[k][i][j -1]
				pos_c = (k - 1) * cols * lins + (i - 1) * cols + j - 1
				matriz[pos_l][pos_c] = -g
				matriz[pos_c][pos_l] = -g
			end
			
			if (i < lins) then
				-- escolhe o menor valor de condutancia
				g = (entrada[k][i][j] < entrada[k][i + 1][j]) and entrada[k][i][j] or entrada[k][i + 1][j]
				pos_c = (k - 1) * cols * lins + (i) * cols + j
				matriz[pos_l][pos_c] = -g
				matriz[pos_c][pos_l] = -g
				-- adiciona na diagonal
				matriz[pos_c][pos_c] = matriz[pos_c][pos_c] + g
				matriz[pos_l][pos_l] = matriz[pos_l][pos_l] + g
			else
				-- escolhe o menor valor de condutancia
				g = (entrada[k][i][j] < entrada[k][i - 1][j]) and entrada[k][i][j] or entrada[k][i - 1][j]
				pos_c = (k - 1) * cols * lins + (i - 2) * cols + j
				matriz[pos_l][pos_c] = -g
				matriz[pos_c][pos_l] = -g
			end
			
			if (k < pags) then
				-- escolhe o menor valor de condutancia
				g = (entrada[k][i][j] < entrada[k + 1][i ][j]) and entrada[k][i][j] or entrada[k + 1][i][j]
				pos_c = (k) * cols * lins + (i - 1) * cols + j
				matriz[pos_l][pos_c] = -g
				matriz[pos_c][pos_l] = -g
				-- adiciona na diagonal
				matriz[pos_c][pos_c] = matriz[pos_c][pos_c] + g
				matriz[pos_l][pos_l] = matriz[pos_l][pos_l] + g
			else
				matriz[pos_l][pos_l] = matriz[pos_l][pos_l] + g_t_remoto
			end
		
		
			--pos_c = (k - 1) * cols * lins + (i - 1) * cols + j
			
			
			pos_l = pos_l + 1
		end
	end
end

i = 11; j = 8
b[(i - 1) * cols + j] = 1

erro, n = conjugate_gradient (matriz, x, b)
print ('erro =', erro, 'iteracoes =' , n)

local file = assert(io.open('teste.csv', "w"))
for i = 1, lins do
	for j = 1, cols do
		t = tostring(x[(i - 1) * cols + j])
		file:write( t:gsub('%.', ','))
		if ( j < cols) then file:write( ";" ) end
	end
	file:write( "\n" ) 
end
file:close()